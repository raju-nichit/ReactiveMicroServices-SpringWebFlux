@Configuration
@EnableStateMachine
public class StateMachineConfig extends StateMachineConfigurerAdapter<States, Events> {

    @Override
    public void configure(StateMachineStateConfigurer<States, Events> states) throws Exception {
        states
            .withStates()
            .initial(States.START)
            .state(States.VALIDATE_ACCOUNT, this::validateAccount, null)
            .state(States.VALIDATE_PROD_DEF, this::validateProdDef, null)
            .state(States.CHECK_UAA, this::checkUAA, null)
            .state(States.GET_CTE_DEF, this::getCteDef, null)
            .end(States.DONE);
    }

    @Override
    public void configure(StateMachineTransitionConfigurer<States, Events> transitions) throws Exception {
        transitions
            .withExternal().source(States.START).target(States.VALIDATE_ACCOUNT).event(Events.NEXT)
            .and().withExternal().source(States.VALIDATE_ACCOUNT).target(States.VALIDATE_PROD_DEF).event(Events.NEXT)
            .and().withExternal().source(States.VALIDATE_PROD_DEF).target(States.CHECK_UAA).event(Events.NEXT)
            .and().withExternal().source(States.CHECK_UAA).target(States.GET_CTE_DEF).event(Events.NEXT)
            .and().withExternal().source(States.GET_CTE_DEF).target(States.DONE).event(Events.NEXT);
    }

    // Actions
    private void validateAccount(StateContext<States, Events> context) {
        System.out.println("✅ Validating Account");
    }

    private void validateProdDef(StateContext<States, Events> context) {
        System.out.println("✅ Validating Product Definition");
    }

    private void checkUAA(StateContext<States, Events> context) {
        System.out.println("✅ Checking UAA");
    }

    private void getCteDef(StateContext<States, Events> context) {
        System.out.println("✅ Getting CTE Definition");
    }
}
