import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.WebTestClient;
import reactor.core.publisher.Mono;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.reactive.server.WebTestClient.bindToController;

@ExtendWith(MockitoExtension.class)
public class WorkflowEventControllerTest {

    @Mock
    private WorkflowEventService workflowEventService;

    @InjectMocks
    private WorkflowEventController workflowEventController;

    private WebTestClient webTestClient;

    @BeforeEach
    public void setUp() {
        webTestClient = bindToController(workflowEventController).build();
    }

    @Test
    public void testSaveEvent_Success() {
        // Given
        WorkflowEventRequest request = new WorkflowEventRequest();
        WorkflowEventRequest savedEvent = new WorkflowEventRequest();
        ApiResponse<WorkflowEventRequest> expectedResponse = new ApiResponse<>("Event created successfully", savedEvent, true);

        // When
        when(workflowEventService.saveEvent(any(WorkflowEventRequest.class))).thenReturn(Mono.just(savedEvent));

        // Then
        webTestClient.post()
            .uri("/api/v1/dataservice/workflowevents")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(request)
            .exchange()
            .expectStatus().isOk()
            .expectBody(ApiResponse.class)
            .isEqualTo(expectedResponse);
    }

    @Test
    public void testSaveEvent_Failure() {
        // Given
        WorkflowEventRequest request = new WorkflowEventRequest();
        ApiResponse<WorkflowEventRequest> expectedResponse = new ApiResponse<>("Failed to save workflow event.", null, false);

        // When
        when(workflowEventService.saveEvent(any(WorkflowEventRequest.class))).thenReturn(Mono.error(new RuntimeException("Error")));

        // Then
        webTestClient.post()
            .uri("/api/v1/dataservice/workflowevents")
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(request)
            .exchange()
            .expectStatus().isOk()
            .expectBody(ApiResponse.class)
            .isEqualTo(expectedResponse);
    }
}
