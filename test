import static org.mockito.Mockito.*;
import static org.springframework.test.web.reactive.server.WebTestClient.bindToController;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.web.reactive.server.WebTestClient;

import reactor.core.publisher.Flux;

public class GraphQLControllerTest {

    @Mock
    private CitiDirectGraphQLService clientDefinitionService;

    @InjectMocks
    private GraphQLController graphQLController;

    private WebTestClient webTestClient;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        webTestClient = bindToController(graphQLController).build();
    }

    @Test
    public void testFindClientDefinitionByReferenceIdAndType() {
        // Prepare test data
        String referenceId = "testReferenceId";
        String type = "testType";

        CDBEModel model1 = new CDBEModel();
        model1.setId("1");
        model1.setName("Test Model 1");

        CDBEModel model2 = new CDBEModel();
        model2.setId("2");
        model2.setName("Test Model 2");

        when(clientDefinitionService.findClientDefinitionDetails(type, referenceId))
                .thenReturn(Flux.just(model1, model2));

        // Execute the GraphQL query
        webTestClient.post()
                .uri("/graphql")
                .bodyValue("{\"query\": \"{ ClientDefinitionBE(referenceId: \\\"testReferenceId\\\", type: \\\"testType\\\") { id, name } }\"}")
                .exchange()
                .expectStatus().isOk()
                .expectBody()
                .jsonPath("$.data.ClientDefinitionBE[0].id").isEqualTo("1")
                .jsonPath("$.data.ClientDefinitionBE[0].name").isEqualTo("Test Model 1")
                .jsonPath("$.data.ClientDefinitionBE[1].id").isEqualTo("2")
                .jsonPath("$.data.ClientDefinitionBE[1].name").isEqualTo("Test Model 2");

        // Verify the service method was called with the correct parameters
        verify(clientDefinitionService, times(1)).findClientDefinitionDetails(type, referenceId);
    }
}
