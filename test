import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.StringWriter;

public class XMLTransformer {
    public static void main(String[] args) throws Exception {
        String inputXML = """
                <Root>
                    <Header>
                        <Info>Header Information</Info>
                    </Header>
                    <UpdatePUPDetails>
                        <AccountDetails>
                            <AccountType>CDO##DR##CR</AccountType>
                            <Currency>USD</Currency>
                        </AccountDetails>
                    </UpdatePUPDetails>
                    <Footer>
                        <Info>Footer Information</Info>
                    </Footer>
                </Root>
                """;

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(new java.io.ByteArrayInputStream(inputXML.getBytes()));

        NodeList accountDetailsList = document.getElementsByTagName("AccountDetails");

        for (int i = 0; i < accountDetailsList.getLength(); i++) {
            Element accountDetails = (Element) accountDetailsList.item(i);
            String accountTypeText = accountDetails.getElementsByTagName("AccountType").item(0).getTextContent();
            String currencyText = accountDetails.getElementsByTagName("Currency").item(0).getTextContent();

            // Split the AccountType value
            String[] accountTypes = accountTypeText.split("##");

            // Get the parent node of <AccountDetails> and remove the old <AccountDetails> node
            Node parentNode = accountDetails.getParentNode();
            parentNode.removeChild(accountDetails);

            // Create new <AccountDetails> nodes for each AccountType and append to the parent node
            for (String accountType : accountTypes) {
                Element newAccountDetails = document.createElement("AccountDetails");
                Element newAccountType = document.createElement("AccountType");
                newAccountType.setTextContent(accountType);
                Element newCurrency = document.createElement("Currency");
                newCurrency.setTextContent(currencyText);

                newAccountDetails.appendChild(newAccountType);
                newAccountDetails.appendChild(newCurrency);
                parentNode.appendChild(newAccountDetails);
            }
        }

        // Convert the new Document to a String
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        DOMSource source = new DOMSource(document);
        StringWriter writer = new StringWriter();
        StreamResult result = new StreamResult(writer);
        transformer.transform(source, result);

        System.out.println(writer.toString());
    }
}
