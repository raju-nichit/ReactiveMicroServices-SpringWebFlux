import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Sort;
import org.springframework.data.elasticsearch.core.ReactiveElasticsearchTemplate;
import org.springframework.data.elasticsearch.core.SearchHit;
import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;
import org.springframework.data.elasticsearch.core.query.Query;
import org.springframework.data.elasticsearch.core.mapping.IndexCoordinates;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CurrencyDataServiceTest {

    @InjectMocks
    private CurrencyDataService currencyDataService;

    @Mock
    private CurrencyRepo currencyRepo;

    @Mock
    private ReactiveElasticsearchTemplate elasticsearchTemplate;

    @Mock
    private CurrencyDataValidator currencyDataValidator;

    @Test
    void testFetchCurrency_validRequest() {
        // Arrange
        CurrencyDataRequest request = new CurrencyDataRequest();
        request.setBranchCode("001");
        request.setCountryCode("US");
        request.setCurrencyCode("USD");
        request.setRequestId("12345");

        Currency currency = new Currency();
        currency.setBranchCode("001");
        currency.setCountryCode("US");
        currency.setCurrencyCode("USD");

        // Mock SearchHit for Elasticsearch response
        SearchHit<Currency> searchHit = mock(SearchHit.class);
        when(searchHit.getContent()).thenReturn(currency);

        // Mock Elasticsearch search method
        when(elasticsearchTemplate.search(any(Query.class), eq(Currency.class), any(IndexCoordinates.class)))
                .thenReturn(Flux.just(searchHit));

        // Mocking currencyDataValidator
        when(currencyDataValidator.validate(request)).thenReturn(List.of());

        // Act
        Mono<CurrencyDataResponse> responseMono = currencyDataService.fetchCurrency(request);

        // Assert
        StepVerifier.create(responseMono)
                .assertNext(response -> {
                    assertEquals("12345", response.getRequestId());
                    assertEquals("001", response.getSource()); // Assuming `request.getId()` returns "001"
                    assertNotNull(response.getCurrencyData());
                    assertEquals(1, response.getCurrencyData().size());
                })
                .verifyComplete();
    }

    @Test
    void testFetchCurrency_invalidRequest() {
        // Arrange
        CurrencyDataRequest request = new CurrencyDataRequest();
        request.setRequestId("12345");

        List<String> errors = List.of("Invalid Branch Code");
        when(currencyDataValidator.validate(request)).thenReturn(errors);

        // Act
        Mono<CurrencyDataResponse> responseMono = currencyDataService.fetchCurrency(request);

        // Assert
        StepVerifier.create(responseMono)
                .expectErrorMatches(throwable -> throwable instanceof BadRequestException &&
                        throwable.getMessage().contains("Invalid Branch Code"))
                .verify();
    }

    @Test
    void testSearchCurrencyData() {
        // Arrange
        CurrencyDataRequest request = new CurrencyDataRequest();
        request.setBranchCode("001");
        request.setCountryCode("US");
        request.setCurrencyCode("USD");

        Currency currency = new Currency();
        currency.setBranchCode("001");
        currency.setCountryCode("US");
        currency.setCurrencyCode("USD");

        // Mock SearchHit for Elasticsearch response
        SearchHit<Currency> searchHit = mock(SearchHit.class);
        when(searchHit.getContent()).thenReturn(currency);

        // Mock Elasticsearch search method
        when(elasticsearchTemplate.search(any(Query.class), eq(Currency.class), any(IndexCoordinates.class)))
                .thenReturn(Flux.just(searchHit));

        // Act
        Flux<Currency> currencyFlux = currencyDataService.searchCurrencyData(request);

        // Assert
        StepVerifier.create(currencyFlux)
                .assertNext(foundCurrency -> {
                    assertEquals("001", foundCurrency.getBranchCode());
                    assertEquals("US", foundCurrency.getCountryCode());
                    assertEquals("USD", foundCurrency.getCurrencyCode());
                })
                .verifyComplete();
    }
}
