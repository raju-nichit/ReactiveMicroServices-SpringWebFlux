@Bean
public ReactiveClientHttpConnector reactiveClientHttpConnector() {
    try {
        char[] password = env.getProperty("keypass").toCharArray();
        KeyStore keyStore = loadKeyStore(env.getProperty("keystore"), password);

        SslContext sslContext = SslContextBuilder
                .forClient()
                .keyManager(keyStore, password)
                .trustManager(InsecureTrustManagerFactory.INSTANCE) // Trust all certificates (for testing)
                .build();

        HttpClient httpClient = HttpClient.create()
                .secure(ssl -> ssl.sslContext(sslContext))
                .resolver(DefaultAddressResolverGroup.INSTANCE); // Bypasses strict hostname verification

        return new ReactorClientHttpConnector(httpClient);
    } catch (Exception e) {
        logger.error("Error initializing WebClient with SSL", e);
        throw new IllegalStateException("Failed to create WebClient", e);
    }
}

private KeyStore loadKeyStore(String path, char[] password) throws Exception {
    try (InputStream keyStoreStream = new FileInputStream(path)) {
        KeyStore keyStore = KeyStore.getInstance("PKCS12");
        keyStore.load(keyStoreStream, password);
        return keyStore;
    }
}
