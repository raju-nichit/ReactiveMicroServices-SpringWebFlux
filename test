import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;

public class CreditCheckServiceTest {

    @Mock
    private WebClient creditCheckGfcDetailsWebClient;

    @Mock
    private WebClient.RequestBodyUriSpec requestBodyUriSpec;

    @Mock
    private WebClient.RequestBodySpec requestBodySpec;

    @Mock
    private WebClient.RequestHeadersSpec<?> requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    @InjectMocks
    private CreditCheckService creditCheckService;  // Replace with your actual service class

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetGfcDetailsSuccess() {
        String requestId = "12345";
        String expectedResponse = "GFC Details Success";

        // Mocking WebClient call chain
        when(creditCheckGfcDetailsWebClient.post()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(any())).thenReturn(requestBodySpec);
        when(requestBodySpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(String.class)).thenReturn(Mono.just(expectedResponse));

        // Execute the method
        String response = creditCheckService.getGfcDetails(requestId).block();

        // Assertions
        assertEquals(expectedResponse, response);
        verify(creditCheckGfcDetailsWebClient, times(1)).post();
    }

    @Test
    void testGetGfcDetailsError() {
        String requestId = "12345";
        WebClientResponseException exception = WebClientResponseException.create(500, "Internal Server Error", null, null, null);

        // Mocking WebClient to throw an error
        when(creditCheckGfcDetailsWebClient.post()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(any())).thenReturn(requestBodySpec);
        when(requestBodySpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(String.class)).thenReturn(Mono.error(exception));

        // Execute the method
        String response = creditCheckService.getGfcDetails(requestId).block();

        // Assuming handleErrorResponse returns Mono.empty()
        assertNull(response);
        verify(creditCheckGfcDetailsWebClient, times(1)).post();
    }
}
