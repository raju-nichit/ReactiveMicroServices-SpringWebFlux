import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import java.util.Base64;
import java.security.SecureRandom;

public class AES256EncryptionDecryption {

    private static final String ALGORITHM = "AES/GCM/NoPadding";
    private static final int GCM_TAG_LENGTH = 128; // in bits
    private static final int AES_KEY_SIZE = 256; // in bits
    private static final int IV_SIZE = 12; // 96 bits, recommended for GCM mode

    public static void main(String[] args) throws Exception {
        // Generate AES Key
        SecretKey secretKey = generateAESKey();

        // Example plaintext
        String plaintext = "Sensitive Data";

        // Encrypt the plaintext
        String encryptedData = encrypt(plaintext, secretKey);
        System.out.println("Encrypted: " + encryptedData);

        // Decrypt the ciphertext
        String decryptedData = decrypt(encryptedData, secretKey);
        System.out.println("Decrypted: " + decryptedData);
    }

    // Generate AES-256 key
    public static SecretKey generateAESKey() throws Exception {
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(AES_KEY_SIZE);
        return keyGen.generateKey();
    }

    // Encrypt method
    public static String encrypt(String plaintext, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        byte[] iv = generateIV(); // Generate a random IV
        GCMParameterSpec parameterSpec = new GCMParameterSpec(GCM_TAG_LENGTH, iv);

        cipher.init(Cipher.ENCRYPT_MODE, key, parameterSpec);
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes());

        // Combine IV and encrypted bytes for transmission/storage
        byte[] encryptedMessage = new byte[IV_SIZE + encryptedBytes.length];
        System.arraycopy(iv, 0, encryptedMessage, 0, IV_SIZE);
        System.arraycopy(encryptedBytes, 0, encryptedMessage, IV_SIZE, encryptedBytes.length);

        // Return Base64 encoded string for easy storage or transmission
        return Base64.getEncoder().encodeToString(encryptedMessage);
    }

    // Decrypt method
    public static String decrypt(String encryptedData, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance(ALGORITHM);

        byte[] encryptedMessage = Base64.getDecoder().decode(encryptedData);

        // Extract IV from the beginning of the message
        byte[] iv = new byte[IV_SIZE];
        System.arraycopy(encryptedMessage, 0, iv, 0, IV_SIZE);

        GCMParameterSpec parameterSpec = new GCMParameterSpec(GCM_TAG_LENGTH, iv);
        cipher.init(Cipher.DECRYPT_MODE, key, parameterSpec);

        // Extract the encrypted bytes from the message
        byte[] encryptedBytes = new byte[encryptedMessage.length - IV_SIZE];
        System.arraycopy(encryptedMessage, IV_SIZE, encryptedBytes, 0, encryptedBytes.length);

        byte[] decryptedBytes = cipher.doFinal(encryptedBytes);
        return new String(decryptedBytes);
    }

    // Generate a random Initialization Vector (IV)
    private static byte[] generateIV() {
        byte[] iv = new byte[IV_SIZE];
        SecureRandom secureRandom = new SecureRandom();
        secureRandom.nextBytes(iv);
        return iv;
    }
}
