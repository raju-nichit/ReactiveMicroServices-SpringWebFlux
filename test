@Test
void processUpdateEventRequest_ShouldReturnResponse_OnSuccess() {
    // Mock dependencies
    WebClient webClient = mock(WebClient.class);
    WebClient.RequestBodyUriSpec requestBodyUriSpec = mock(WebClient.RequestBodyUriSpec.class);
    WebClient.RequestBodySpec requestBodySpec = mock(WebClient.RequestBodySpec.class);
    WebClient.RequestHeadersSpec<?> requestHeadersSpec = mock(WebClient.RequestHeadersSpec.class);
    WebClient.ResponseSpec responseSpec = mock(WebClient.ResponseSpec.class);

    String apiUrl = "http://mock-api.com/update";
    CreditCheckService creditCheckService = new CreditCheckService(() -> webClient, apiUrl);
    String requestJson = "{\"key\": \"value\"}";
    String expectedResponse = "{\"status\": \"success\"}";

    // Correctly mock each step
    when(webClient.post()).thenReturn(requestBodyUriSpec);
    when(requestBodyUriSpec.uri(eq(apiUrl))).thenReturn(requestBodySpec); // Fix: Ensure this returns a valid mock
    when(requestBodySpec.header(eq("Content-Type"), eq(MediaType.APPLICATION_JSON_VALUE))).thenReturn(requestBodySpec);
    when(requestBodySpec.bodyValue(requestJson)).thenReturn(requestHeadersSpec);
    when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
    when(responseSpec.bodyToMono(String.class)).thenReturn(Mono.just(expectedResponse));

    // Call method
    Mono<String> result = creditCheckService.processUpdateEventRequest(requestJson);

    // Verify response
    StepVerifier.create(result)
            .expectNext(expectedResponse)
            .verifyComplete();

    // Verify interactions
    verify(webClient, times(1)).post();
}
