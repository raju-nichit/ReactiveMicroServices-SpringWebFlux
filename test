import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Sort;
import org.springframework.data.elasticsearch.core.ReactiveElasticsearchTemplate;
import org.springframework.data.elasticsearch.core.SearchHit;
import org.springframework.data.elasticsearch.core.mapping.IndexCoordinates;
import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;
import org.springframework.data.elasticsearch.core.query.Query;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BranchDataServiceTest {

    @InjectMocks
    private BranchDataService branchDataService;

    @Mock
    private BranchDetailsRepo branchDetailsRepo;

    @Mock
    private BranchesRepo branchesRepo;

    @Mock
    private ReactiveElasticsearchTemplate elasticsearchTemplate;

    @Mock
    private BranchDataValidator branchDataValidator;

    @Mock
    private BranchDetailsDataValidator branchDetailsDataValidator;

    @Test
    void testFetchBranches_validRequest() {
        // Arrange
        BranchDataRequest request = new BranchDataRequest();
        request.setBranchCode("001");
        request.setCountryCode("US");
        request.setRequestId("12345");

        Branches branches = new Branches();
        branches.setBranchCode("001");
        branches.setCountryCode("US");

        // Mock SearchHit for Elasticsearch response
        SearchHit<Branches> searchHit = mock(SearchHit.class);
        when(searchHit.getContent()).thenReturn(branches);

        // Mock Elasticsearch search method
        when(elasticsearchTemplate.search(any(Query.class), eq(Branches.class), any(IndexCoordinates.class)))
                .thenReturn(Flux.just(searchHit));

        // Mocking branchDataValidator
        when(branchDataValidator.validate(request)).thenReturn(List.of());

        // Act
        Mono<BranchDataResponse> responseMono = branchDataService.fetchBranches(request);

        // Assert
        StepVerifier.create(responseMono)
                .assertNext(response -> {
                    assertEquals("12345", response.getRequestId());
                    assertEquals("001", response.getSource());  // Assuming `request.getSource()` returns "001"
                    assertNotNull(response.getBranchesData());
                    assertEquals(1, response.getBranchesData().size());
                })
                .verifyComplete();
    }

    @Test
    void testFetchBranches_invalidRequest() {
        // Arrange
        BranchDataRequest request = new BranchDataRequest();
        request.setRequestId("12345");

        List<String> errors = List.of("Invalid Branch Code");
        when(branchDataValidator.validate(request)).thenReturn(errors);

        // Act
        Mono<BranchDataResponse> responseMono = branchDataService.fetchBranches(request);

        // Assert
        StepVerifier.create(responseMono)
                .expectErrorMatches(throwable -> throwable instanceof BadRequestException &&
                        throwable.getMessage().contains("Invalid Branch Code"))
                .verify();
    }

    @Test
    void testSearchBranchesData() {
        // Arrange
        BranchDataRequest request = new BranchDataRequest();
        request.setBranchCode("001");
        request.setCountryCode("US");

        Branches branches = new Branches();
        branches.setBranchCode("001");
        branches.setCountryCode("US");

        // Mock SearchHit for Elasticsearch response
        SearchHit<Branches> searchHit = mock(SearchHit.class);
        when(searchHit.getContent()).thenReturn(branches);

        // Mock Elasticsearch search method
        when(elasticsearchTemplate.search(any(Query.class), eq(Branches.class), any(IndexCoordinates.class)))
                .thenReturn(Flux.just(searchHit));

        // Act
        Flux<Branches> branchesFlux = branchDataService.searchBranchesData(request);

        // Assert
        StepVerifier.create(branchesFlux)
                .assertNext(foundBranch -> {
                    assertEquals("001", foundBranch.getBranchCode());
                    assertEquals("US", foundBranch.getCountryCode());
                })
                .verifyComplete();
    }

    @Test
    void testPerformBranchLookup_validRequest() {
        // Arrange
        BranchDetailsLookupRequest request = new BranchDetailsLookupRequest();
        request.setCountryCodes(List.of("US"));
        request.setRequestId("12345");

        BranchDetails branchDetails = new BranchDetails();
        branchDetails.setCountryCode("US");

        // Mock SearchHit for Elasticsearch response
        SearchHit<BranchDetails> searchHit = mock(SearchHit.class);
        when(searchHit.getContent()).thenReturn(branchDetails);

        // Mock Elasticsearch search method
        when(elasticsearchTemplate.search(any(Query.class), eq(BranchDetails.class), any(IndexCoordinates.class)))
                .thenReturn(Flux.just(searchHit));

        // Mocking branchDetailsDataValidator
        when(branchDetailsDataValidator.validate(request)).thenReturn(List.of());

        // Act
        Mono<BranchDetailsLookupResponse> responseMono = branchDataService.performBranchLookup(request);

        // Assert
        StepVerifier.create(responseMono)
                .assertNext(response -> {
                    assertEquals("12345", response.getRequestId());
                    assertNotNull(response.getBranchDetailsData());
                    assertEquals(1, response.getBranchDetailsData().size());
                })
                .verifyComplete();
    }

    @Test
    void testPerformBranchLookup_invalidRequest() {
        // Arrange
        BranchDetailsLookupRequest request = new BranchDetailsLookupRequest();
        request.setRequestId("12345");

        List<String> errors = List.of("Invalid Country Code");
        when(branchDetailsDataValidator.validate(request)).thenReturn(errors);

        // Act
        Mono<BranchDetailsLookupResponse> responseMono = branchDataService.performBranchLookup(request);

        // Assert
        StepVerifier.create(responseMono)
                .expectErrorMatches(throwable -> throwable instanceof BadRequestException &&
                        throwable.getMessage().contains("Invalid Country Code"))
                .verify();
    }

    @Test
    void testLookupBranchDetails() {
        // Arrange
        BranchDetailsLookupRequest request = new BranchDetailsLookupRequest();
        request.setCountryCodes(List.of("US"));

        BranchDetails branchDetails = new BranchDetails();
        branchDetails.setCountryCode("US");

        // Mock SearchHit for Elasticsearch response
        SearchHit<BranchDetails> searchHit = mock(SearchHit.class);
        when(searchHit.getContent()).thenReturn(branchDetails);

        // Mock Elasticsearch search method
        when(elasticsearchTemplate.search(any(Query.class), eq(BranchDetails.class), any(IndexCoordinates.class)))
                .thenReturn(Flux.just(searchHit));

        // Act
        Flux<BranchDetails> branchDetailsFlux = branchDataService.lookupBranchDetails(request);

        // Assert
        StepVerifier.create(branchDetailsFlux)
                .assertNext(foundBranchDetails -> {
                    assertEquals("US", foundBranchDetails.getCountryCode());
                })
                .verifyComplete();
    }
}
