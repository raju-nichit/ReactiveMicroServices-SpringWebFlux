import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Sort;
import org.springframework.data.elasticsearch.core.ReactiveElasticsearchTemplate;
import org.springframework.data.elasticsearch.core.SearchHit;
import org.springframework.data.elasticsearch.core.mapping.IndexCoordinates;
import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;
import org.springframework.data.elasticsearch.core.query.Query;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class AccountPurposeDataServiceTest {

    @InjectMocks
    private AccountPurposeDataService accountPurposeDataService;

    @Mock
    private AccountPurposeRepo accountPurposeRepo;

    @Mock
    private ReactiveElasticsearchTemplate elasticsearchTemplate;

    @Mock
    private AccountPurposeDataValidator accountPurposeDataValidator;

    @Test
    void testFetchAccountPurpose_validRequest() {
        // Arrange
        AccountPurposeDataRequest request = new AccountPurposeDataRequest();
        request.setBranchCode("001");
        request.setCountryCode("US");
        request.setRequestId("12345");

        AccountPurpose accountPurpose = new AccountPurpose();
        accountPurpose.setBranchCode("001");
        accountPurpose.setCountryCode("US");

        // Mock SearchHit for Elasticsearch response
        SearchHit<AccountPurpose> searchHit = mock(SearchHit.class);
        when(searchHit.getContent()).thenReturn(accountPurpose);

        // Mock Elasticsearch search method
        when(elasticsearchTemplate.search(any(Query.class), eq(AccountPurpose.class), any(IndexCoordinates.class)))
                .thenReturn(Flux.just(searchHit));

        // Mocking accountPurposeDataValidator
        when(accountPurposeDataValidator.validate(request)).thenReturn(List.of());

        // Act
        Mono<AccountPurposeDataResponse> responseMono = accountPurposeDataService.fetchAccountPurpose(request);

        // Assert
        StepVerifier.create(responseMono)
                .assertNext(response -> {
                    assertEquals("12345", response.getRequestId());
                    assertEquals("001", response.getSource());  // Assuming request.getSource() returns "001"
                    assertNotNull(response.getAccountPurposeData());
                    assertEquals(1, response.getAccountPurposeData().size());
                })
                .verifyComplete();
    }

    @Test
    void testFetchAccountPurpose_invalidRequest() {
        // Arrange
        AccountPurposeDataRequest request = new AccountPurposeDataRequest();
        request.setRequestId("12345");

        List<String> errors = List.of("Invalid Branch Code");
        when(accountPurposeDataValidator.validate(request)).thenReturn(errors);

        // Act
        Mono<AccountPurposeDataResponse> responseMono = accountPurposeDataService.fetchAccountPurpose(request);

        // Assert
        StepVerifier.create(responseMono)
                .expectErrorMatches(throwable -> throwable instanceof BadRequestException &&
                        throwable.getMessage().contains("Invalid Branch Code"))
                .verify();
    }

    @Test
    void testSearchAccountPurposeData() {
        // Arrange
        AccountPurposeDataRequest request = new AccountPurposeDataRequest();
        request.setBranchCode("001");
        request.setCountryCode("US");

        AccountPurpose accountPurpose = new AccountPurpose();
        accountPurpose.setBranchCode("001");
        accountPurpose.setCountryCode("US");

        // Mock SearchHit for Elasticsearch response
        SearchHit<AccountPurpose> searchHit = mock(SearchHit.class);
        when(searchHit.getContent()).thenReturn(accountPurpose);

        // Mock Elasticsearch search method
        when(elasticsearchTemplate.search(any(Query.class), eq(AccountPurpose.class), any(IndexCoordinates.class)))
                .thenReturn(Flux.just(searchHit));

        // Act
        Flux<AccountPurpose> accountPurposeFlux = accountPurposeDataService.searchAccountPurposeData(request);

        // Assert
        StepVerifier.create(accountPurposeFlux)
                .assertNext(foundAccountPurpose -> {
                    assertEquals("001", foundAccountPurpose.getBranchCode());
                    assertEquals("US", foundAccountPurpose.getCountryCode());
                })
                .verifyComplete();
    }
}
