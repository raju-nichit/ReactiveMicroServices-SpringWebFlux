import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import java.util.Base64;

public class AES256Example {

    private static final String ALGORITHM = "AES/GCM/NoPadding";
    private static final int GCM_TAG_LENGTH = 128; // in bits
    private static final int AES_KEY_SIZE = 256; // in bits

    public static void main(String[] args) throws Exception {
        // Generate AES Key
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(AES_KEY_SIZE);
        SecretKey secretKey = keyGen.generateKey();

        // Encryption
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        byte[] iv = new byte[12]; // 96-bit IV (recommended)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, new GCMParameterSpec(GCM_TAG_LENGTH, iv));
        String plaintext = "Kutri";
        byte[] encryptedData = cipher.doFinal(plaintext.getBytes());

        // Base64 encode for storing as string
        String encodedData = Base64.getEncoder().encodeToString(encryptedData);
        System.out.println("Encrypted: " + encodedData);

        // Decryption
        cipher.init(Cipher.DECRYPT_MODE, secretKey, new GCMParameterSpec(GCM_TAG_LENGTH, iv));
        byte[] decodedData = Base64.getDecoder().decode(encodedData);
        byte[] decryptedData = cipher.doFinal(decodedData);

        System.out.println("Decrypted: " + new String(decryptedData));
    }
}
