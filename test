private Mono<Void> createErrorMessage(ServerWebExchange serverWebExchange, ErrorResponse errorResponse) {

    serverWebExchange.getResponse().setRawStatusCode(HttpStatus.UNAUTHORIZED.value());
    serverWebExchange.getResponse().getHeaders().add("Content-Type", "application/json");

    try {
        // Write the generic error response to the client
        return serverWebExchange.getResponse().writeWith(Flux.just(
            serverWebExchange.getResponse().bufferFactory().wrap(objectMapper.writeValueAsBytes(errorResponse))
        ));

    } catch (JsonProcessingException e) {
        // Log the exception internally without exposing details to the client
        LoggerFactory.getLogger(this.getClass()).error("Error serializing ErrorResponse", e);

        // Provide a generic error message for the client
        ErrorResponse genericErrorResponse = new ErrorResponse("An unexpected error occurred. Please try again later.");
        return serverWebExchange.getResponse().writeWith(Flux.just(
            serverWebExchange.getResponse().bufferFactory().wrap(objectMapper.writeValueAsBytes(genericErrorResponse))
        ));
    }
}
