import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Sort;
import org.springframework.data.elasticsearch.core.ReactiveElasticsearchTemplate;
import org.springframework.data.elasticsearch.core.SearchHit;
import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;
import org.springframework.data.elasticsearch.core.query.Query;
import org.springframework.data.elasticsearch.core.query.QueryBuilders;
import org.springframework.data.elasticsearch.core.query.NativeSearchQuery;
import org.springframework.data.elasticsearch.core.index.IndexCoordinates;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class SelfServiceAOServiceTest {

    @InjectMocks
    private SelfServiceAOService selfServiceAOService;

    @Mock
    private TTSCompanyDataRepo ttsCompanyDataRepo;

    @Mock
    private ReactiveElasticsearchTemplate elasticsearchTemplate;

    @Mock
    private SSEligibilityCheckValidator ssEligibilityCheckValidator;

    @Test
    void testProcessEligibilityCheck_validRequest() {
        // Arrange
        SSEligibilityCheckRequest request = new SSEligibilityCheckRequest();
        request.setGfcIds(List.of("GFC123", "GFC456"));
        request.setRequestId("12345");

        TTSCompanyData companyData1 = new TTSCompanyData();
        companyData1.setGfcId("GFC123");
        companyData1.setNegClient("SELF");

        // Mock SearchHit for Elasticsearch response
        SearchHit<TTSCompanyData> searchHit1 = mock(SearchHit.class);
        when(searchHit1.getContent()).thenReturn(companyData1);

        // Mock Elasticsearch search method
        when(elasticsearchTemplate.search(any(NativeSearchQuery.class), eq(TTSCompanyData.class), any(IndexCoordinates.class)))
                .thenReturn(Flux.just(searchHit1));

        // Mocking eligibility check validator
        when(ssEligibilityCheckValidator.validate(request)).thenReturn(List.of());

        // Act
        Mono<SSEligibilityCheckResponse> responseMono = selfServiceAOService.processEligibilityCheck(request);

        // Assert
        StepVerifier.create(responseMono)
                .assertNext(response -> {
                    assertEquals("12345", response.getRequestId());
                    assertNotNull(response.getLegalEntities());
                    assertEquals(2, response.getLegalEntities().size());
                })
                .verifyComplete();
    }
}
